# This file is part of the Apathetic Guide to IdleOn project.
#
# Apathetic Tools © 2025 (https://github.com/apathetic-tools)
#
# This source code is dual-licensed:
#  - Under the GNU Affero General Public License v3.0 (AGPLv3).
#  - Under alternative licensing terms by the copyright holder.
#
# See `LICENSE-CODE` for details.
#
# SPDX-License-Identifier: AGPL-3.0-or-later
#
# https://docs.astro.build/en/guides/deploy/github/
# https://github.com/peaceiris/actions-gh-pages
name: Deploy to GitHub Pages

# job constants
env:
  ASTRO_NODE_VERSION: 22.x
  DEPLOY_REPO: apathetic-idleon/apathetic-idleon.github.io
  DEPLOY_BRANCH: gh-pages
  ENABLE_JEKYLL: false
  DEPLOY_README_BRANCH: main
  ENABLE_JEKYLL_README: true
  

# to create your key:
#   ssh-keygen -t ed25519 -a 100 -f path/to/keyfile -N "" -C "github-actions"
# make sure no passphrase, can't get prompted in github secret

# if you need older rsa method for older servers:
#   ssh-keygen -t rsa -b 4096 -o -f path/to/keyfile -N "" -C "github-actions"

# on the source repo: add the private key file contents without an extension to ACTIONS_DEPLOY_KEY secrets
#   repo -> settings -> environments -> github-pages -> Environment secrets -> add ACTIONS_DEPLOY_KEY secret -> paste in contents
# make sure there is a trailing newline at the end. It will fail otherwise.
# also, if you use environment secret here, you need to use `environment: github-pages` below. Otherwise use a repository secret instead.

# on the destination repo: add the file contents of the .pub file to deploy keys
#   repo -> settings -> Security header -> Deploy keys -> Add deploy key -> check write access

# make sure both files use linux LF characters, not windows ones.
# if you have a copy paste / clipboard utility or some other program it may mangle the contents.

# if you private key does not have `BEGIN OPENSSH PRIVATE KEY` in header you NEED to convert to PEM (make a backup of your key first):
#   ssh-keygen -p -f path/to/your/key -m pem

on:
  # Trigger the workflow every time you push to the `main` branch
  # Using a different branch name? Replace `main` with your branch’s name
  push:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

# Allow this job to clone the repo and create a page deployment
permissions:
  contents: read
  # pages: write # since we are ssh pushing, don't need this
  # id-token: write # since we are ssh pushing, don't need this

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # we don't use withastro/action@v3 because we want to cache pnpm
      - name: Read pnpm version from package.json
        id: pnpm-version
        run: echo "version=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_OUTPUT

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ steps.pnpm-version.outputs.version }}
          run_install: false          
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.ASTRO_NODE_VERSION }}
          cache: 'pnpm'

      - name: Cache Astro build
        uses: actions/cache@v4
        with:
          path: .astro
          key: ${{ runner.os }}-astro-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-astro-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build site
        run: pnpm run build

      - name: Build site repo README
        run: pnpm run build:site-repo      

      - name: Upload artifact gh-pages
        if: ${{ github.ref == 'refs/heads/main' }} # only deploy main
        id: upload-gh-pages
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: ./dist

      - name: Upload artifact site-repo README        
        if: ${{ github.ref == 'refs/heads/main' && env.DEPLOY_README_BRANCH != '' }} # only deploy main
        id: upload-site-repo-readme
        uses: actions/upload-artifact@v4
        with:
          name: site-repo-readme
          path: ./dist-site-repo
    outputs:
      artifact_gh_pages: ${{ steps.upload-gh-pages.outcome }}
      artifact_site_repo_readme: ${{ steps.upload-site-repo-readme.outcome }}

  deploy_gh_pages:
    if: ${{ needs.build.outputs.artifact_gh_pages == 'success' }}
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages

    steps:
      - name: Verify ACTIONS_DEPLOY_KEY
        run: |
          if [ -z "${{ secrets.ACTIONS_DEPLOY_KEY }}" ]; then
            echo "❌ ACTIONS_DEPLOY_KEY is not set!"
            exit 1
          fi
          if ! echo "${{ secrets.ACTIONS_DEPLOY_KEY }}" | grep -q "BEGIN OPENSSH PRIVATE KEY"; then
            echo "❌ ACTIONS_DEPLOY_KEY does not look like a valid OpenSSH private key!"
            exit 1
          fi

      - name: Download build output        
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: ./dist        

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          external_repository: ${{ env.DEPLOY_REPO }}
          publish_branch: ${{ env.DEPLOY_BRANCH }}
          publish_dir: ./dist
          enable_jekyll: ${{ env.ENABLE_JEKYLL }}

  deploy_site_repo_readme:
    if: ${{ needs.build.outputs.artifact_site_repo_readme == 'success' }}
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages

    steps:      
      - name: Verify ACTIONS_DEPLOY_KEY
        run: |
          if [ -z "${{ secrets.ACTIONS_DEPLOY_KEY }}" ]; then
            echo "❌ ACTIONS_DEPLOY_KEY is not set!"
            exit 1
          fi
          if ! echo "${{ secrets.ACTIONS_DEPLOY_KEY }}" | grep -q "BEGIN OPENSSH PRIVATE KEY"; then
            echo "❌ ACTIONS_DEPLOY_KEY does not look like a valid OpenSSH private key!"
            exit 1
          fi

      - name: Download build output        
        uses: actions/download-artifact@v4
        with:
          name: site-repo-readme
          path: ./dist-site-repo         

      - name: Deploy to GitHub README Branch    
        uses: peaceiris/actions-gh-pages@v4
        with:
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          external_repository: ${{ env.DEPLOY_REPO }}
          publish_branch: ${{ env.DEPLOY_README_BRANCH }}
          publish_dir: ./dist-site-repo
          enable_jekyll: ${{ env.ENABLE_JEKYLL_README }}

  summary:
    needs: [deploy_gh_pages, deploy_site_repo_readme]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy_gh_pages.result }}" = "success" ]; then
            echo "- ✅ GitHub Pages deployed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy_gh_pages.result }}" = "skipped" ]; then
            echo "- ⏭️ GitHub Pages deployment skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ GitHub Pages deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.deploy_site_repo_readme.result }}" = "success" ]; then
            echo "- ✅ site-repo README deployed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy_site_repo_readme.result }}" = "skipped" ]; then
            echo "- ⏭️ site-repo README deployment skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ site-repo README deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
