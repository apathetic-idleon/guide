---
// based on replicating the ThemeSelector on smaller screens

// icons for our dropdown menu
const icons: { [key: string]: string | null } = {
	// Starlight: https://github.com/apathetic-tools/snippets/blob/main/docs/astro-starlight/icons-by-category/README.md
	'open-book': "M21.17 2.06A13.1 13.1 0 0 0 19 1.87a12.94 12.94 0 0 0-7 2.05 12.94 12.94 0 0 0-7-2 13.1 13.1 0 0 0-2.17.19 1 1 0 0 0-.83 1v12a1 1 0 0 0 1.17 1 10.9 10.9 0 0 1 8.25 1.91l.12.07h.11a.91.91 0 0 0 .7 0h.11l.12-.07A10.899 10.899 0 0 1 20.83 16 1 1 0 0 0 22 15V3a1 1 0 0 0-.83-.94ZM11 15.35a12.87 12.87 0 0 0-6-1.48H4v-10c.333-.02.667-.02 1 0a10.86 10.86 0 0 1 6 1.8v9.68Zm9-1.44h-1a12.87 12.87 0 0 0-6 1.48V5.67a10.86 10.86 0 0 1 6-1.8c.333-.02.667-.02 1 0v10.04Zm1.17 4.15a13.098 13.098 0 0 0-2.17-.19 12.94 12.94 0 0 0-7 2.05 12.94 12.94 0 0 0-7-2.05c-.727.003-1.453.066-2.17.19A1 1 0 0 0 2 19.21a1 1 0 0 0 1.17.79 10.9 10.9 0 0 1 8.25 1.91 1 1 0 0 0 1.16 0A10.9 10.9 0 0 1 20.83 20a1 1 0 0 0 1.17-.79 1 1 0 0 0-.83-1.15Z",
	'seti:pipeline': "M15.948 15.948L15.948 18.888L7.926 18.888Q7.800 18.384 7.506 17.922L7.506 17.922L17.922 7.506Q18.804 8.052 19.896 8.052L19.896 8.052Q21.408 8.052 22.542 7.023Q23.676 5.994 23.802 4.461Q23.928 2.928 22.983 1.710Q22.038 0.492 20.526 0.240Q19.014-0.012 17.733 0.828Q16.452 1.668 16.074 3.138L16.074 3.138L7.926 3.138Q7.548 1.710 6.330 0.870Q5.112 0.030 3.621 0.219Q2.130 0.408 1.164 1.521Q0.198 2.634 0.198 4.125Q0.198 5.616 1.164 6.729Q2.130 7.842 3.621 8.031Q5.112 8.220 6.330 7.380Q7.548 6.540 7.926 5.112L7.926 5.112L16.074 5.112Q16.200 5.616 16.494 6.078L16.494 6.078L6.078 16.494Q5.196 15.948 4.146 15.948L4.146 15.948Q2.592 15.948 1.458 16.977Q0.324 18.006 0.198 19.539Q0.072 21.072 1.017 22.290Q1.962 23.508 3.474 23.760Q4.986 24.012 6.267 23.172Q7.548 22.332 7.926 20.862L7.926 20.862L15.948 20.862L15.948 23.802L23.802 23.802L23.802 15.948L15.948 15.948ZM4.146 6.078L4.146 6.078Q3.432 6.078 2.886 5.637Q2.340 5.196 2.214 4.503Q2.088 3.810 2.403 3.201Q2.718 2.592 3.369 2.319Q4.020 2.046 4.692 2.256Q5.364 2.466 5.763 3.033Q6.162 3.600 6.099 4.314Q6.036 5.028 5.532 5.532L5.532 5.532Q4.944 6.078 4.146 6.078ZM19.854 2.172L19.854 2.172Q20.484 2.172 20.967 2.487Q21.450 2.802 21.681 3.369Q21.912 3.936 21.807 4.524Q21.702 5.112 21.282 5.532Q20.862 5.952 20.274 6.057Q19.686 6.162 19.119 5.931Q18.552 5.700 18.237 5.217Q17.922 4.734 17.922 4.104L17.922 4.104Q17.922 3.306 18.489 2.739Q19.056 2.172 19.854 2.172ZM4.146 21.828L4.146 21.828Q3.306 21.828 2.739 21.261Q2.172 20.694 2.172 19.875Q2.172 19.056 2.739 18.489Q3.306 17.922 4.125 17.922Q4.944 17.922 5.532 18.489Q6.120 19.056 6.120 19.875Q6.120 20.694 5.532 21.261Q4.944 21.828 4.146 21.828ZM17.922 21.828L17.922 17.922L21.828 17.922L21.828 21.828L17.922 21.828Z",

	// Mdi: https://icon-sets.iconify.design/mdi/?keyword=mdi
	'lightbulb-outline': "M12 2a7 7 0 0 1 7 7c0 2.38-1.19 4.47-3 5.74V17a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1v-2.26C6.19 13.47 5 11.38 5 9a7 7 0 0 1 7-7M9 21v-1h6v1a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1m3-17a5 5 0 0 0-5 5c0 2.05 1.23 3.81 3 4.58V16h4v-2.42c1.77-.77 3-2.53 3-4.58a5 5 0 0 0-5-5",
};

// scaffold for more complicated lookups
function getIcon(iconName : string) : string | null {
	if (!icons[iconName]) return null;
	return icons[iconName];
}

// the list of options, and an optional icon
const options = [
  { label: "Hints", value: "hints", icon: getIcon('lightbulb-outline') },
  { label: "Choices", value: "choices", icon: getIcon('open-book') },
  { label: "Instruct", value: "instruct", icon: getIcon('seti:pipeline') },
];
const defaultIcon = options[0].icon;

// for the control-buttons
const activeClasses = ['bg-accent', 'text-accent-foreground', 'border-2', 'border-gray-500'];       // filled accent
const inactiveClasses = ['bg-surface', 'text-text', 'border-2', 'border-transparent'];
---

<div class="guide-mode-select lg:mr-1 sm:mr-1">
  
  <!-- Inline buttons for large screens -->
	<div class="control-buttons hidden lg:flex flex items-center">
		<!-- Label -->
  	<span class="font-medium text-text">Give:</span>
		<div class="flex gap-2 ml-2">		
			{options.map((opt) => (
				<button
					type="button"
					data-value={opt.value}
					class={`rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-ring ${ inactiveClasses.join(' ') }`}
				>
					<svg aria-hidden="true" class="icon label-icon" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="--sl-icon-size: 1em;"><path d={opt.icon} /></svg> <span>{opt.label}</span>
				</button>
			))}
		</div>
	</div>

  <!-- Dropdown for screens smaller than lg -->
  <div class="control-dropdown lg:hidden">
    <label style="--sl-select-width: 6.25em;">
      <span class="sr-only">Select guide mode</span>
			<svg aria-hidden="true" class="icon label-icon" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="--sl-icon-size: 1em;"><path d={defaultIcon} /></svg>			
      <select  				      
        autocomplete="off"
      >
        {options.map((opt) => (
          <option value={opt.value}>{opt.label}</option>
        ))}
      </select>
      <svg aria-hidden="true" class="icon caret" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="--sl-icon-size: 1em;"><path d="M17 9.17a1 1 0 0 0-1.41 0L12 12.71 8.46 9.17a1 1 0 1 0-1.41 1.42l4.24 4.24a1.002 1.002 0 0 0 1.42 0L17 10.59a1.002 1.002 0 0 0 0-1.42Z"></path></svg>
    </label>
  </div>

</div>

<style lang="css" scoped>
.control-buttons button {
	--sl-label-icon-size: 0.875rem;
	position: relative;
	display: inline-flex;
	align-items: center;
	justify-content: center;	
	gap: 0.3rem;	
	font-variant: small-caps;	
	padding: 0.25rem 0.375rem; /* vertical and horizontal padding */
}

.control-buttons .label-icon {
	color: var(--sl-icon-color);
	font-size: var(--sl-label-icon-size);
	width: 1em;
	height: 1em;

	position: absolute;	
	top: 50%;
	left: 0.375rem; /* matches button left padding */
	transform: translateY(-40%); /* tweak this depending on chosen icons */
	pointer-events: none;	
}

.control-buttons button span {	
	display: inline-block;
	padding-left: calc(var(--sl-label-icon-size) + 0.3rem);
}

/* Dropdown for screens smaller than lg */
.control-dropdown label {
	--sl-label-icon-size: 0.875rem;
	--sl-caret-size: 1.25rem;
	--sl-inline-padding: 0.5rem;
	position: relative;
	display: flex;
	align-items: center;
	gap: 0.25rem;
	color: var(--sl-color-gray-1);
}

.control-dropdown svg {
	color: var(--sl-icon-color);
	font-size: var(--sl-icon-size, 1em);
	width: 1em;
	height: 1em;
}

.control-dropdown .icon {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
}

.control-dropdown .label-icon {
	font-size: var(--sl-label-icon-size);
  inset-inline-start: 0;
}

.control-dropdown select {
	border: 0;
	padding-block: 0.625rem;
	padding-inline: calc(var(--sl-label-icon-size) + var(--sl-inline-padding) + 0.25rem) calc(var(--sl-caret-size) + var(--sl-inline-padding) + 0.25rem);
	margin-inline: calc(var(--sl-inline-padding) * -1);
	width: calc(var(--sl-select-width) + var(--sl-inline-padding) * 2);
	background-color: transparent;
	text-overflow: ellipsis;
	color: inherit;
	cursor: pointer;
	appearance: none;
}

.control-dropdown select option {
	background-color: var(--sl-color-bg-nav);
  color: var(--sl-color-gray-1);
}

.control-dropdown .caret {
	font-size: var(--sl-caret-size);
  inset-inline-end: 0;
}

:global([data-theme='dark']) .control-dropdown select,
:global([data-theme='dark']) .control-dropdown select option,
:global([data-theme='dark']) .control-dropdown select option:checked {
	background-color: var(--sl-color-gray-6);
	color: var(--sl-color-text);
}

:global([data-theme='dark']) .control-dropdown select option:hover {
	background-color: var(--sl-color-accent-high);
	color: var(--sl-color-text-invert);
}
</style>

<script is:inline define:vars={{ activeClasses, inactiveClasses, options }}>
	function selectGuideMode(value, target) {
		removeModeClasses = options.map(opt => "guide-mode-state-"+opt.value).filter(val => val !== "guide-mode-state-"+value);
		document.documentElement.classList.remove(...removeModeClasses);
		document.documentElement.classList.add(`guide-mode-state-${value}`);

		// hamburger menu is weird, we need to find everything relative to target if possible.
		let controlButtons = null;
		let controlDropdown = null;
		if (target && target.tagName === 'BUTTON') {
			controlButtons = target.parentElement;
			controlDropdown = controlButtons.parentElement.querySelector('.control-dropdown');
		} else if (target && target.tagName === 'SELECT') {
			controlDropdown = target.parentElement;
			controlButtons = controlDropdown.parentElement.querySelector('.control-buttons');			
		} else {			
			const guideModeSelect = document.querySelector('.guide-mode-select');
			controlButtons = guideModeSelect.querySelector('.control-buttons');			
			controlDropdown = guideModeSelect.querySelector('.control-dropdown');		
		}

		// Remove active class from previous button
    const currentButton = controlButtons?.querySelector('button[data-value].active');
    if (currentButton) {
			currentButton.classList.remove(...activeClasses);
      currentButton.classList.add(...inactiveClasses);
			currentButton.classList.remove('active');
		}

		// Add active class to the new button
    const btn = controlButtons?.querySelector(`button[data-value="${value}"]`);
    if (btn) {
			btn.classList.remove(...inactiveClasses);
			btn.classList.add(...activeClasses);      
			btn.classList.add('active');
		}

		// Update dropdown value
    const selectEl = controlDropdown?.querySelector('select');
    if (selectEl) {
			selectEl.value = value;

			// Update dropdown icon
			const labelIcon = controlDropdown.querySelector('.label-icon path');
			if (labelIcon) {
				const option = options.find(opt => opt.value === value);
				if (option) {
					console.log("setting icon")
					labelIcon.setAttribute('d', option.icon);
				}
			}
		}

		localStorage.setItem("guideMode", value);
		document.dispatchEvent(new CustomEvent("guideModeChange", { detail: value }));
	}

  // add event listeners after DOM is ready
  if (typeof window !== 'undefined') {
		if (!window.__guideModeInitialized) {
      window.__guideModeInitialized = true;

			const saved = localStorage.getItem('guideMode') || 'hints';
			selectGuideMode(saved);

			document.querySelectorAll('.guide-mode-select .control-buttons button[data-value]').forEach((btn) => {
				btn.addEventListener('click', (e) => selectGuideMode(btn.dataset.value, e.currentTarget));
			});

			// dropdown in hamburger menu doesn't exist, but does on medium screens in header
			document.addEventListener('change', (e) => {
				const selectEl = e.target.closest('.guide-mode-select .control-dropdown select');
				if (selectEl) {
					selectGuideMode(selectEl.value, selectEl);
				}
			});
		}
  }
</script>
